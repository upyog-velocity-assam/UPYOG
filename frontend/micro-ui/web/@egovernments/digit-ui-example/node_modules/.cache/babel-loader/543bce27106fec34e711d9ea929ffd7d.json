{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { getStatusProps, isServer, isValidTimeout, noop, replaceEqualDeep, shallowEqualObjects, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { focusManager } from './focusManager';\nimport { Subscribable } from './subscribable';\nexport var QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueryObserver, _Subscribable);\n  function QueryObserver(client, options) {\n    var _this;\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.options = options;\n    _this.initialDataUpdateCount = 0;\n    _this.initialErrorUpdateCount = 0;\n    _this.trackedProps = [];\n    _this.bindMethods();\n    _this.setOptions(options);\n    return _this;\n  }\n  var _proto = QueryObserver.prototype;\n  _proto.bindMethods = function bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  };\n  _proto.onSubscribe = function onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.updateQuery();\n      this.currentQuery.addObserver(this);\n      if (this.willFetchOnMount()) {\n        this.executeFetch();\n      }\n      this.updateResult();\n      this.updateTimers();\n    }\n  };\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n  _proto.willLoadOnMount = function willLoadOnMount() {\n    return this.options.enabled !== false && !this.currentQuery.state.dataUpdatedAt && !(this.currentQuery.state.status === 'error' && this.options.retryOnMount === false);\n  };\n  _proto.willRefetchOnMount = function willRefetchOnMount() {\n    return this.options.enabled !== false && this.currentQuery.state.dataUpdatedAt > 0 && (this.options.refetchOnMount === 'always' || this.options.refetchOnMount !== false && this.isStale());\n  };\n  _proto.willFetchOnMount = function willFetchOnMount() {\n    return this.willLoadOnMount() || this.willRefetchOnMount();\n  };\n  _proto.willFetchOnReconnect = function willFetchOnReconnect() {\n    return this.options.enabled !== false && (this.options.refetchOnReconnect === 'always' || this.options.refetchOnReconnect !== false && this.isStale());\n  };\n  _proto.willFetchOnWindowFocus = function willFetchOnWindowFocus() {\n    return this.options.enabled !== false && (this.options.refetchOnWindowFocus === 'always' || this.options.refetchOnWindowFocus !== false && this.isStale());\n  };\n  _proto.willFetchOptionally = function willFetchOptionally() {\n    return this.options.enabled !== false && this.isStale();\n  };\n  _proto.isStale = function isStale() {\n    return this.currentQuery.isStaleByTime(this.options.staleTime);\n  };\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.clearTimers();\n    this.currentQuery.removeObserver(this);\n  };\n  _proto.setOptions = function setOptions(options) {\n    var prevOptions = this.options;\n    this.options = this.client.defaultQueryObserverOptions(options);\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n    var didUpdateQuery = this.updateQuery();\n    var optionalFetch;\n    var updateStaleTimeout;\n    var updateRefetchInterval; // If we subscribed to a new query, optionally fetch and update intervals\n\n    if (didUpdateQuery) {\n      optionalFetch = true;\n      updateStaleTimeout = true;\n      updateRefetchInterval = true;\n    } // Optionally fetch if the query became enabled\n\n    if (this.options.enabled !== false && prevOptions.enabled === false) {\n      optionalFetch = true;\n    } // Update stale interval if needed\n\n    if (this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime) {\n      updateStaleTimeout = true;\n    } // Update refetch interval if needed\n\n    if (this.options.enabled !== prevOptions.enabled || this.options.refetchInterval !== prevOptions.refetchInterval) {\n      updateRefetchInterval = true;\n    } // Fetch only if there are subscribers\n\n    if (this.hasListeners()) {\n      if (optionalFetch) {\n        this.optionalFetch();\n      }\n    } // Update result when subscribing to a new query\n\n    if (didUpdateQuery) {\n      this.updateResult();\n    } // Update intervals only if there are subscribers\n\n    if (this.hasListeners()) {\n      if (updateStaleTimeout) {\n        this.updateStaleTimeout();\n      }\n      if (updateRefetchInterval) {\n        this.updateRefetchInterval();\n      }\n    }\n  };\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  };\n  _proto.getTrackedCurrentResult = function getTrackedCurrentResult() {\n    return this.trackedCurrentResult;\n  };\n  _proto.getNextResult = function getNextResult(options) {\n    var _this2 = this;\n    return new Promise(function (resolve, reject) {\n      var unsubscribe = _this2.subscribe(function (result) {\n        if (!result.isFetching) {\n          unsubscribe();\n          if (result.isError && (options == null ? void 0 : options.throwOnError)) {\n            reject(result.error);\n          } else {\n            resolve(result);\n          }\n        }\n      });\n    });\n  };\n  _proto.getCurrentQuery = function getCurrentQuery() {\n    return this.currentQuery;\n  };\n  _proto.remove = function remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  };\n  _proto.refetch = function refetch(options) {\n    return this.fetch(options);\n  };\n  _proto.fetch = function fetch(fetchOptions) {\n    var _this3 = this;\n    return this.executeFetch(fetchOptions).then(function () {\n      _this3.updateResult();\n      return _this3.currentResult;\n    });\n  };\n  _proto.optionalFetch = function optionalFetch() {\n    if (this.willFetchOptionally()) {\n      this.executeFetch();\n    }\n  };\n  _proto.executeFetch = function executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    var promise = this.currentQuery.fetch(this.options, fetchOptions);\n    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  };\n  _proto.updateStaleTimeout = function updateStaleTimeout() {\n    var _this4 = this;\n    this.clearStaleTimeout();\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n    var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    var timeout = time + 1;\n    this.staleTimeoutId = setTimeout(function () {\n      if (!_this4.currentResult.isStale) {\n        _this4.updateResult();\n      }\n    }, timeout);\n  };\n  _proto.updateRefetchInterval = function updateRefetchInterval() {\n    var _this5 = this;\n    this.clearRefetchInterval();\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.options.refetchInterval)) {\n      return;\n    }\n    this.refetchIntervalId = setInterval(function () {\n      if (_this5.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        _this5.executeFetch();\n      }\n    }, this.options.refetchInterval);\n  };\n  _proto.updateTimers = function updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval();\n  };\n  _proto.clearTimers = function clearTimers() {\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n  };\n  _proto.clearStaleTimeout = function clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  };\n  _proto.clearRefetchInterval = function clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  };\n  _proto.getNewResult = function getNewResult() {\n    var _this$previousQueryRe;\n    var state = this.currentQuery.state;\n    var isFetching = state.isFetching,\n      status = state.status;\n    var isPreviousData = false;\n    var isPlaceholderData = false;\n    var data;\n    var dataUpdatedAt = state.dataUpdatedAt; // Optimistically set status to loading if we will start fetching\n\n    if (!this.hasListeners() && this.willFetchOnMount()) {\n      isFetching = true;\n      if (!dataUpdatedAt) {\n        status = 'loading';\n      }\n    } // Keep previous data if needed\n\n    if (this.options.keepPreviousData && !state.dataUpdateCount && ((_this$previousQueryRe = this.previousQueryResult) == null ? void 0 : _this$previousQueryRe.isSuccess) && status !== 'error') {\n      data = this.previousQueryResult.data;\n      dataUpdatedAt = this.previousQueryResult.dataUpdatedAt;\n      status = this.previousQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (this.options.select && typeof state.data !== 'undefined') {\n      var _this$currentResultSt;\n\n      // Use the previous select result if the query data did not change\n      if (this.currentResult && state.data === ((_this$currentResultSt = this.currentResultState) == null ? void 0 : _this$currentResultSt.data)) {\n        data = this.currentResult.data;\n      } else {\n        data = this.options.select(state.data);\n        if (this.options.structuralSharing !== false) {\n          var _this$currentResult;\n          data = replaceEqualDeep((_this$currentResult = this.currentResult) == null ? void 0 : _this$currentResult.data, data);\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n    if (typeof this.options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      var placeholderData = typeof this.options.placeholderData === 'function' ? this.options.placeholderData() : this.options.placeholderData;\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n    var result = _extends({}, getStatusProps(status), {\n      data: data,\n      dataUpdatedAt: dataUpdatedAt,\n      error: state.error,\n      errorUpdatedAt: state.errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > this.initialDataUpdateCount || state.errorUpdateCount > this.initialErrorUpdateCount,\n      isFetching: isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData: isPlaceholderData,\n      isPreviousData: isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: this.isStale(),\n      refetch: this.refetch,\n      remove: this.remove\n    });\n    return result;\n  };\n  _proto.shouldNotifyListeners = function shouldNotifyListeners(prevResult, result) {\n    var _this6 = this;\n    var _this$options = this.options,\n      notifyOnChangeProps = _this$options.notifyOnChangeProps,\n      notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;\n    if (prevResult === result) {\n      return false;\n    }\n    if (!prevResult) {\n      return true;\n    }\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true;\n    }\n    var keys = Object.keys(result);\n    var includedProps = notifyOnChangeProps === 'tracked' ? this.trackedProps : notifyOnChangeProps;\n    var _loop = function _loop(i) {\n      var key = keys[i];\n      var changed = prevResult[key] !== result[key];\n      var isIncluded = includedProps == null ? void 0 : includedProps.some(function (x) {\n        return x === key;\n      });\n      var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function (x) {\n        return x === key;\n      });\n      if (changed) {\n        if (notifyOnChangePropsExclusions && isExcluded) {\n          return \"continue\";\n        }\n        if (!notifyOnChangeProps || isIncluded || notifyOnChangeProps === 'tracked' && _this6.trackedProps.length === 0) {\n          return {\n            v: true\n          };\n        }\n      }\n    };\n    for (var i = 0; i < keys.length; i++) {\n      var _ret = _loop(i);\n      if (_ret === \"continue\") continue;\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n    return false;\n  };\n  _proto.updateResult = function updateResult(action) {\n    var _this7 = this;\n    var prevResult = this.currentResult;\n    var result = this.getNewResult(); // Keep reference to the current state on which the current result is based on\n\n    this.currentResultState = this.currentQuery.state; // Only update if something has changed\n\n    if (shallowEqualObjects(result, prevResult)) {\n      return;\n    }\n    this.currentResult = result;\n    if (this.options.notifyOnChangeProps === 'tracked') {\n      var addTrackedProps = function addTrackedProps(prop) {\n        if (!_this7.trackedProps.includes(prop)) {\n          _this7.trackedProps.push(prop);\n        }\n      };\n      this.trackedCurrentResult = {};\n      Object.keys(result).forEach(function (key) {\n        Object.defineProperty(_this7.trackedCurrentResult, key, {\n          configurable: false,\n          enumerable: true,\n          get: function get() {\n            addTrackedProps(key);\n            return result[key];\n          }\n        });\n      });\n    } // Determine which callbacks to trigger\n\n    var notifyOptions = {\n      cache: true\n    };\n    if ((action == null ? void 0 : action.type) === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if ((action == null ? void 0 : action.type) === 'error') {\n      notifyOptions.onError = true;\n    }\n    if (this.shouldNotifyListeners(prevResult, result)) {\n      notifyOptions.listeners = true;\n    }\n    this.notify(notifyOptions);\n  };\n  _proto.updateQuery = function updateQuery() {\n    var prevQuery = this.currentQuery;\n    var query = this.client.getQueryCache().build(this.client, this.options);\n    if (query === prevQuery) {\n      return false;\n    }\n    this.previousQueryResult = this.currentResult;\n    this.currentQuery = query;\n    this.initialDataUpdateCount = query.state.dataUpdateCount;\n    this.initialErrorUpdateCount = query.state.errorUpdateCount;\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      this.currentQuery.addObserver(this);\n    }\n    return true;\n  };\n  _proto.onQueryUpdate = function onQueryUpdate(action) {\n    this.updateResult(action);\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  };\n  _proto.notify = function notify(notifyOptions) {\n    var _this8 = this;\n    notifyManager.batch(function () {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(undefined, _this8.currentResult.error);\n      } // Then trigger the listeners\n\n      if (notifyOptions.listeners) {\n        _this8.listeners.forEach(function (listener) {\n          listener(_this8.currentResult);\n        });\n      } // Then the cache listeners\n\n      if (notifyOptions.cache) {\n        _this8.client.getQueryCache().notify(_this8.currentQuery);\n      }\n    });\n  };\n  return QueryObserver;\n}(Subscribable);","map":{"version":3,"names":["_extends","_inheritsLoose","getStatusProps","isServer","isValidTimeout","noop","replaceEqualDeep","shallowEqualObjects","timeUntilStale","notifyManager","focusManager","Subscribable","QueryObserver","_Subscribable","client","options","_this","call","initialDataUpdateCount","initialErrorUpdateCount","trackedProps","bindMethods","setOptions","_proto","prototype","remove","bind","refetch","onSubscribe","listeners","length","updateQuery","currentQuery","addObserver","willFetchOnMount","executeFetch","updateResult","updateTimers","onUnsubscribe","destroy","willLoadOnMount","enabled","state","dataUpdatedAt","status","retryOnMount","willRefetchOnMount","refetchOnMount","isStale","willFetchOnReconnect","refetchOnReconnect","willFetchOnWindowFocus","refetchOnWindowFocus","willFetchOptionally","isStaleByTime","staleTime","clearTimers","removeObserver","prevOptions","defaultQueryObserverOptions","Error","queryKey","didUpdateQuery","optionalFetch","updateStaleTimeout","updateRefetchInterval","refetchInterval","hasListeners","getCurrentResult","currentResult","getTrackedCurrentResult","trackedCurrentResult","getNextResult","_this2","Promise","resolve","reject","unsubscribe","subscribe","result","isFetching","isError","throwOnError","error","getCurrentQuery","getQueryCache","fetch","fetchOptions","_this3","then","promise","catch","_this4","clearStaleTimeout","time","timeout","staleTimeoutId","setTimeout","_this5","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","isFocused","clearTimeout","undefined","clearInterval","getNewResult","_this$previousQueryRe","isPreviousData","isPlaceholderData","data","keepPreviousData","dataUpdateCount","previousQueryResult","isSuccess","select","_this$currentResultSt","currentResultState","structuralSharing","_this$currentResult","placeholderData","errorUpdatedAt","failureCount","fetchFailureCount","isFetched","errorUpdateCount","isFetchedAfterMount","isLoadingError","isRefetchError","shouldNotifyListeners","prevResult","_this6","_this$options","notifyOnChangeProps","notifyOnChangePropsExclusions","keys","Object","includedProps","_loop","i","key","changed","isIncluded","some","x","isExcluded","v","_ret","action","_this7","addTrackedProps","prop","includes","push","forEach","defineProperty","configurable","enumerable","get","notifyOptions","cache","type","onSuccess","onError","notify","prevQuery","query","build","onQueryUpdate","_this8","batch","onSettled","listener"],"sources":["D:/wamp64/www/UPYOG-Project/Test-UPYOG/UPYOG/frontend/micro-ui/web/micro-ui-internals/node_modules/react-query/es/core/queryObserver.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { getStatusProps, isServer, isValidTimeout, noop, replaceEqualDeep, shallowEqualObjects, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { focusManager } from './focusManager';\nimport { Subscribable } from './subscribable';\nexport var QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueryObserver, _Subscribable);\n\n  function QueryObserver(client, options) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.options = options;\n    _this.initialDataUpdateCount = 0;\n    _this.initialErrorUpdateCount = 0;\n    _this.trackedProps = [];\n\n    _this.bindMethods();\n\n    _this.setOptions(options);\n\n    return _this;\n  }\n\n  var _proto = QueryObserver.prototype;\n\n  _proto.bindMethods = function bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  };\n\n  _proto.onSubscribe = function onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.updateQuery();\n      this.currentQuery.addObserver(this);\n\n      if (this.willFetchOnMount()) {\n        this.executeFetch();\n      }\n\n      this.updateResult();\n      this.updateTimers();\n    }\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n\n  _proto.willLoadOnMount = function willLoadOnMount() {\n    return this.options.enabled !== false && !this.currentQuery.state.dataUpdatedAt && !(this.currentQuery.state.status === 'error' && this.options.retryOnMount === false);\n  };\n\n  _proto.willRefetchOnMount = function willRefetchOnMount() {\n    return this.options.enabled !== false && this.currentQuery.state.dataUpdatedAt > 0 && (this.options.refetchOnMount === 'always' || this.options.refetchOnMount !== false && this.isStale());\n  };\n\n  _proto.willFetchOnMount = function willFetchOnMount() {\n    return this.willLoadOnMount() || this.willRefetchOnMount();\n  };\n\n  _proto.willFetchOnReconnect = function willFetchOnReconnect() {\n    return this.options.enabled !== false && (this.options.refetchOnReconnect === 'always' || this.options.refetchOnReconnect !== false && this.isStale());\n  };\n\n  _proto.willFetchOnWindowFocus = function willFetchOnWindowFocus() {\n    return this.options.enabled !== false && (this.options.refetchOnWindowFocus === 'always' || this.options.refetchOnWindowFocus !== false && this.isStale());\n  };\n\n  _proto.willFetchOptionally = function willFetchOptionally() {\n    return this.options.enabled !== false && this.isStale();\n  };\n\n  _proto.isStale = function isStale() {\n    return this.currentQuery.isStaleByTime(this.options.staleTime);\n  };\n\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.clearTimers();\n    this.currentQuery.removeObserver(this);\n  };\n\n  _proto.setOptions = function setOptions(options) {\n    var prevOptions = this.options;\n    this.options = this.client.defaultQueryObserverOptions(options);\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    var didUpdateQuery = this.updateQuery();\n    var optionalFetch;\n    var updateStaleTimeout;\n    var updateRefetchInterval; // If we subscribed to a new query, optionally fetch and update intervals\n\n    if (didUpdateQuery) {\n      optionalFetch = true;\n      updateStaleTimeout = true;\n      updateRefetchInterval = true;\n    } // Optionally fetch if the query became enabled\n\n\n    if (this.options.enabled !== false && prevOptions.enabled === false) {\n      optionalFetch = true;\n    } // Update stale interval if needed\n\n\n    if (this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime) {\n      updateStaleTimeout = true;\n    } // Update refetch interval if needed\n\n\n    if (this.options.enabled !== prevOptions.enabled || this.options.refetchInterval !== prevOptions.refetchInterval) {\n      updateRefetchInterval = true;\n    } // Fetch only if there are subscribers\n\n\n    if (this.hasListeners()) {\n      if (optionalFetch) {\n        this.optionalFetch();\n      }\n    } // Update result when subscribing to a new query\n\n\n    if (didUpdateQuery) {\n      this.updateResult();\n    } // Update intervals only if there are subscribers\n\n\n    if (this.hasListeners()) {\n      if (updateStaleTimeout) {\n        this.updateStaleTimeout();\n      }\n\n      if (updateRefetchInterval) {\n        this.updateRefetchInterval();\n      }\n    }\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  };\n\n  _proto.getTrackedCurrentResult = function getTrackedCurrentResult() {\n    return this.trackedCurrentResult;\n  };\n\n  _proto.getNextResult = function getNextResult(options) {\n    var _this2 = this;\n\n    return new Promise(function (resolve, reject) {\n      var unsubscribe = _this2.subscribe(function (result) {\n        if (!result.isFetching) {\n          unsubscribe();\n\n          if (result.isError && (options == null ? void 0 : options.throwOnError)) {\n            reject(result.error);\n          } else {\n            resolve(result);\n          }\n        }\n      });\n    });\n  };\n\n  _proto.getCurrentQuery = function getCurrentQuery() {\n    return this.currentQuery;\n  };\n\n  _proto.remove = function remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  };\n\n  _proto.refetch = function refetch(options) {\n    return this.fetch(options);\n  };\n\n  _proto.fetch = function fetch(fetchOptions) {\n    var _this3 = this;\n\n    return this.executeFetch(fetchOptions).then(function () {\n      _this3.updateResult();\n\n      return _this3.currentResult;\n    });\n  };\n\n  _proto.optionalFetch = function optionalFetch() {\n    if (this.willFetchOptionally()) {\n      this.executeFetch();\n    }\n  };\n\n  _proto.executeFetch = function executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    var promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  };\n\n  _proto.updateStaleTimeout = function updateStaleTimeout() {\n    var _this4 = this;\n\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    var timeout = time + 1;\n    this.staleTimeoutId = setTimeout(function () {\n      if (!_this4.currentResult.isStale) {\n        _this4.updateResult();\n      }\n    }, timeout);\n  };\n\n  _proto.updateRefetchInterval = function updateRefetchInterval() {\n    var _this5 = this;\n\n    this.clearRefetchInterval();\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.options.refetchInterval)) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(function () {\n      if (_this5.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        _this5.executeFetch();\n      }\n    }, this.options.refetchInterval);\n  };\n\n  _proto.updateTimers = function updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval();\n  };\n\n  _proto.clearTimers = function clearTimers() {\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n  };\n\n  _proto.clearStaleTimeout = function clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  };\n\n  _proto.clearRefetchInterval = function clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  };\n\n  _proto.getNewResult = function getNewResult() {\n    var _this$previousQueryRe;\n\n    var state = this.currentQuery.state;\n    var isFetching = state.isFetching,\n        status = state.status;\n    var isPreviousData = false;\n    var isPlaceholderData = false;\n    var data;\n    var dataUpdatedAt = state.dataUpdatedAt; // Optimistically set status to loading if we will start fetching\n\n    if (!this.hasListeners() && this.willFetchOnMount()) {\n      isFetching = true;\n\n      if (!dataUpdatedAt) {\n        status = 'loading';\n      }\n    } // Keep previous data if needed\n\n\n    if (this.options.keepPreviousData && !state.dataUpdateCount && ((_this$previousQueryRe = this.previousQueryResult) == null ? void 0 : _this$previousQueryRe.isSuccess) && status !== 'error') {\n      data = this.previousQueryResult.data;\n      dataUpdatedAt = this.previousQueryResult.dataUpdatedAt;\n      status = this.previousQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (this.options.select && typeof state.data !== 'undefined') {\n        var _this$currentResultSt;\n\n        // Use the previous select result if the query data did not change\n        if (this.currentResult && state.data === ((_this$currentResultSt = this.currentResultState) == null ? void 0 : _this$currentResultSt.data)) {\n          data = this.currentResult.data;\n        } else {\n          data = this.options.select(state.data);\n\n          if (this.options.structuralSharing !== false) {\n            var _this$currentResult;\n\n            data = replaceEqualDeep((_this$currentResult = this.currentResult) == null ? void 0 : _this$currentResult.data, data);\n          }\n        }\n      } // Use query data\n      else {\n          data = state.data;\n        } // Show placeholder data if needed\n\n\n    if (typeof this.options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      var placeholderData = typeof this.options.placeholderData === 'function' ? this.options.placeholderData() : this.options.placeholderData;\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    var result = _extends({}, getStatusProps(status), {\n      data: data,\n      dataUpdatedAt: dataUpdatedAt,\n      error: state.error,\n      errorUpdatedAt: state.errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > this.initialDataUpdateCount || state.errorUpdateCount > this.initialErrorUpdateCount,\n      isFetching: isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData: isPlaceholderData,\n      isPreviousData: isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: this.isStale(),\n      refetch: this.refetch,\n      remove: this.remove\n    });\n\n    return result;\n  };\n\n  _proto.shouldNotifyListeners = function shouldNotifyListeners(prevResult, result) {\n    var _this6 = this;\n\n    var _this$options = this.options,\n        notifyOnChangeProps = _this$options.notifyOnChangeProps,\n        notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;\n\n    if (prevResult === result) {\n      return false;\n    }\n\n    if (!prevResult) {\n      return true;\n    }\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true;\n    }\n\n    var keys = Object.keys(result);\n    var includedProps = notifyOnChangeProps === 'tracked' ? this.trackedProps : notifyOnChangeProps;\n\n    var _loop = function _loop(i) {\n      var key = keys[i];\n      var changed = prevResult[key] !== result[key];\n      var isIncluded = includedProps == null ? void 0 : includedProps.some(function (x) {\n        return x === key;\n      });\n      var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function (x) {\n        return x === key;\n      });\n\n      if (changed) {\n        if (notifyOnChangePropsExclusions && isExcluded) {\n          return \"continue\";\n        }\n\n        if (!notifyOnChangeProps || isIncluded || notifyOnChangeProps === 'tracked' && _this6.trackedProps.length === 0) {\n          return {\n            v: true\n          };\n        }\n      }\n    };\n\n    for (var i = 0; i < keys.length; i++) {\n      var _ret = _loop(i);\n\n      if (_ret === \"continue\") continue;\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n\n    return false;\n  };\n\n  _proto.updateResult = function updateResult(action) {\n    var _this7 = this;\n\n    var prevResult = this.currentResult;\n    var result = this.getNewResult(); // Keep reference to the current state on which the current result is based on\n\n    this.currentResultState = this.currentQuery.state; // Only update if something has changed\n\n    if (shallowEqualObjects(result, prevResult)) {\n      return;\n    }\n\n    this.currentResult = result;\n\n    if (this.options.notifyOnChangeProps === 'tracked') {\n      var addTrackedProps = function addTrackedProps(prop) {\n        if (!_this7.trackedProps.includes(prop)) {\n          _this7.trackedProps.push(prop);\n        }\n      };\n\n      this.trackedCurrentResult = {};\n      Object.keys(result).forEach(function (key) {\n        Object.defineProperty(_this7.trackedCurrentResult, key, {\n          configurable: false,\n          enumerable: true,\n          get: function get() {\n            addTrackedProps(key);\n            return result[key];\n          }\n        });\n      });\n    } // Determine which callbacks to trigger\n\n\n    var notifyOptions = {\n      cache: true\n    };\n\n    if ((action == null ? void 0 : action.type) === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if ((action == null ? void 0 : action.type) === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    if (this.shouldNotifyListeners(prevResult, result)) {\n      notifyOptions.listeners = true;\n    }\n\n    this.notify(notifyOptions);\n  };\n\n  _proto.updateQuery = function updateQuery() {\n    var prevQuery = this.currentQuery;\n    var query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === prevQuery) {\n      return false;\n    }\n\n    this.previousQueryResult = this.currentResult;\n    this.currentQuery = query;\n    this.initialDataUpdateCount = query.state.dataUpdateCount;\n    this.initialErrorUpdateCount = query.state.errorUpdateCount;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      this.currentQuery.addObserver(this);\n    }\n\n    return true;\n  };\n\n  _proto.onQueryUpdate = function onQueryUpdate(action) {\n    this.updateResult(action);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  };\n\n  _proto.notify = function notify(notifyOptions) {\n    var _this8 = this;\n\n    notifyManager.batch(function () {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(undefined, _this8.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        _this8.listeners.forEach(function (listener) {\n          listener(_this8.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        _this8.client.getQueryCache().notify(_this8.currentQuery);\n      }\n    });\n  };\n\n  return QueryObserver;\n}(Subscribable);"],"mappings":"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"},"metadata":{},"sourceType":"module"}