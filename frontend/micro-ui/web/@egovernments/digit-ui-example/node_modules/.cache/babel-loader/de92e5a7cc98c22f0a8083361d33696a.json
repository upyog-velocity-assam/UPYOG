{"ast":null,"code":"import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useBaseQuery(options, Observer) {\n  var queryClient = useQueryClient();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly re-mounting after suspense\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    } // Prevent retrying failed query if the error boundary has not been reset yet\n\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  } // Create query observer\n\n  var observerRef = React.useRef();\n  var observer = observerRef.current || new Observer(queryClient, defaultedOptions);\n  observerRef.current = observer; // Update options\n\n  if (observer.hasListeners()) {\n    observer.setOptions(defaultedOptions);\n  }\n  var currentResult = observer.getCurrentResult();\n  var _React$useState = React.useState(currentResult),\n    setCurrentResult = _React$useState[1]; // Subscribe to the observer\n\n  React.useEffect(function () {\n    errorResetBoundary.clearReset();\n    return observer.subscribe(notifyManager.batchCalls(setCurrentResult));\n  }, [observer, errorResetBoundary]); // Handle suspense\n\n  if (observer.options.suspense || observer.options.useErrorBoundary) {\n    if (observer.options.suspense && currentResult.isLoading) {\n      errorResetBoundary.clearReset();\n      var unsubscribe = observer.subscribe();\n      throw observer.refetch().finally(unsubscribe);\n    }\n    if (currentResult.isError) {\n      throw currentResult.error;\n    }\n  }\n  return observer.options.notifyOnChangeProps === 'tracked' ? observer.getTrackedCurrentResult() : currentResult;\n}","map":{"version":3,"names":["React","notifyManager","useQueryErrorResetBoundary","useQueryClient","useBaseQuery","options","Observer","queryClient","errorResetBoundary","defaultedOptions","defaultQueryObserverOptions","onError","batchCalls","onSuccess","onSettled","suspense","staleTime","isReset","retryOnMount","observerRef","useRef","observer","current","hasListeners","setOptions","currentResult","getCurrentResult","_React$useState","useState","setCurrentResult","useEffect","clearReset","subscribe","useErrorBoundary","isLoading","unsubscribe","refetch","finally","isError","error","notifyOnChangeProps","getTrackedCurrentResult"],"sources":["D:/wamp64/www/UPYOG-Project/Test-UPYOG/UPYOG/frontend/micro-ui/web/micro-ui-internals/node_modules/react-query/es/react/useBaseQuery.js"],"sourcesContent":["import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useBaseQuery(options, Observer) {\n  var queryClient = useQueryClient();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly re-mounting after suspense\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    } // Prevent retrying failed query if the error boundary has not been reset yet\n\n\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  } // Create query observer\n\n\n  var observerRef = React.useRef();\n  var observer = observerRef.current || new Observer(queryClient, defaultedOptions);\n  observerRef.current = observer; // Update options\n\n  if (observer.hasListeners()) {\n    observer.setOptions(defaultedOptions);\n  }\n\n  var currentResult = observer.getCurrentResult();\n\n  var _React$useState = React.useState(currentResult),\n      setCurrentResult = _React$useState[1]; // Subscribe to the observer\n\n\n  React.useEffect(function () {\n    errorResetBoundary.clearReset();\n    return observer.subscribe(notifyManager.batchCalls(setCurrentResult));\n  }, [observer, errorResetBoundary]); // Handle suspense\n\n  if (observer.options.suspense || observer.options.useErrorBoundary) {\n    if (observer.options.suspense && currentResult.isLoading) {\n      errorResetBoundary.clearReset();\n      var unsubscribe = observer.subscribe();\n      throw observer.refetch().finally(unsubscribe);\n    }\n\n    if (currentResult.isError) {\n      throw currentResult.error;\n    }\n  }\n\n  return observer.options.notifyOnChangeProps === 'tracked' ? observer.getTrackedCurrentResult() : currentResult;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}