{"ast":null,"code":"import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { QueriesObserver } from '../core/queriesObserver';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useQueries(queries) {\n  var queryClient = useQueryClient(); // Create queries observer\n\n  var observerRef = React.useRef();\n  var observer = observerRef.current || new QueriesObserver(queryClient, queries);\n  observerRef.current = observer; // Update queries\n\n  if (observer.hasListeners()) {\n    observer.setQueries(queries);\n  }\n  var _React$useState = React.useState(function () {\n      return observer.getCurrentResult();\n    }),\n    currentResult = _React$useState[0],\n    setCurrentResult = _React$useState[1]; // Subscribe to the observer\n\n  React.useEffect(function () {\n    return observer.subscribe(notifyManager.batchCalls(setCurrentResult));\n  }, [observer]);\n  return currentResult;\n}","map":{"version":3,"names":["React","notifyManager","QueriesObserver","useQueryClient","useQueries","queries","queryClient","observerRef","useRef","observer","current","hasListeners","setQueries","_React$useState","useState","getCurrentResult","currentResult","setCurrentResult","useEffect","subscribe","batchCalls"],"sources":["D:/wamp64/www/UPYOG-Project/Test-UPYOG/UPYOG/frontend/micro-ui/web/node_modules/react-query/es/react/useQueries.js"],"sourcesContent":["import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { QueriesObserver } from '../core/queriesObserver';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useQueries(queries) {\n  var queryClient = useQueryClient(); // Create queries observer\n\n  var observerRef = React.useRef();\n  var observer = observerRef.current || new QueriesObserver(queryClient, queries);\n  observerRef.current = observer; // Update queries\n\n  if (observer.hasListeners()) {\n    observer.setQueries(queries);\n  }\n\n  var _React$useState = React.useState(function () {\n    return observer.getCurrentResult();\n  }),\n      currentResult = _React$useState[0],\n      setCurrentResult = _React$useState[1]; // Subscribe to the observer\n\n\n  React.useEffect(function () {\n    return observer.subscribe(notifyManager.batchCalls(setCurrentResult));\n  }, [observer]);\n  return currentResult;\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,cAAc,QAAQ,uBAAuB;AACtD,OAAO,SAASC,UAAUA,CAACC,OAAO,EAAE;EAClC,IAAIC,WAAW,GAAGH,cAAc,CAAC,CAAC,CAAC,CAAC;;EAEpC,IAAII,WAAW,GAAGP,KAAK,CAACQ,MAAM,CAAC,CAAC;EAChC,IAAIC,QAAQ,GAAGF,WAAW,CAACG,OAAO,IAAI,IAAIR,eAAe,CAACI,WAAW,EAAED,OAAO,CAAC;EAC/EE,WAAW,CAACG,OAAO,GAAGD,QAAQ,CAAC,CAAC;;EAEhC,IAAIA,QAAQ,CAACE,YAAY,CAAC,CAAC,EAAE;IAC3BF,QAAQ,CAACG,UAAU,CAACP,OAAO,CAAC;EAC9B;EAEA,IAAIQ,eAAe,GAAGb,KAAK,CAACc,QAAQ,CAAC,YAAY;MAC/C,OAAOL,QAAQ,CAACM,gBAAgB,CAAC,CAAC;IACpC,CAAC,CAAC;IACEC,aAAa,GAAGH,eAAe,CAAC,CAAC,CAAC;IAClCI,gBAAgB,GAAGJ,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;;EAG3Cb,KAAK,CAACkB,SAAS,CAAC,YAAY;IAC1B,OAAOT,QAAQ,CAACU,SAAS,CAAClB,aAAa,CAACmB,UAAU,CAACH,gBAAgB,CAAC,CAAC;EACvE,CAAC,EAAE,CAACR,QAAQ,CAAC,CAAC;EACd,OAAOO,aAAa;AACtB"},"metadata":{},"sourceType":"module"}