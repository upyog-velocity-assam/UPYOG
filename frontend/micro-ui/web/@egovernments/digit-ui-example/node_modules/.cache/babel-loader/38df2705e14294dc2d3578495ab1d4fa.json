{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { ensureArray, functionalUpdate, isValidTimeout, noop, replaceEqualDeep, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { getLogger } from './logger';\nimport { Retryer, isCancelledError } from './retryer'; // TYPES\n\n// CLASS\nexport var Query = /*#__PURE__*/function () {\n  function Query(config) {\n    this.defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.cache = config.cache;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.initialState = config.state || this.getDefaultState(this.options);\n    this.state = this.initialState;\n    this.scheduleGc();\n  }\n  var _proto = Query.prototype;\n  _proto.setOptions = function setOptions(options) {\n    var _this$options$cacheTi;\n    this.options = _extends({}, this.defaultOptions, options); // Default to 5 minutes if not cache time is set\n\n    this.cacheTime = Math.max(this.cacheTime || 0, (_this$options$cacheTi = this.options.cacheTime) != null ? _this$options$cacheTi : 5 * 60 * 1000);\n  };\n  _proto.setDefaultOptions = function setDefaultOptions(options) {\n    this.defaultOptions = options;\n  };\n  _proto.scheduleGc = function scheduleGc() {\n    var _this = this;\n    this.clearGcTimeout();\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(function () {\n        _this.optionalRemove();\n      }, this.cacheTime);\n    }\n  };\n  _proto.clearGcTimeout = function clearGcTimeout() {\n    clearTimeout(this.gcTimeout);\n    this.gcTimeout = undefined;\n  };\n  _proto.optionalRemove = function optionalRemove() {\n    if (!this.observers.length && !this.state.isFetching) {\n      this.cache.remove(this);\n    }\n  };\n  _proto.setData = function setData(updater, options) {\n    var _this$options$isDataE, _this$options;\n    var prevData = this.state.data; // Get the new data\n\n    var data = functionalUpdate(updater, prevData); // Use prev data if an isDataEqual function is defined and returns `true`\n\n    if ((_this$options$isDataE = (_this$options = this.options).isDataEqual) == null ? void 0 : _this$options$isDataE.call(_this$options, prevData, data)) {\n      data = prevData;\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data);\n    } // Set data and mark it as cached\n\n    this.dispatch({\n      data: data,\n      type: 'success',\n      dataUpdatedAt: options == null ? void 0 : options.updatedAt\n    });\n    return data;\n  };\n  _proto.setState = function setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state: state\n    });\n  };\n  _proto.cancel = function cancel(options) {\n    var _this$retryer;\n    var promise = this.promise;\n    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  };\n  _proto.destroy = function destroy() {\n    this.clearGcTimeout();\n    this.cancel({\n      silent: true\n    });\n  };\n  _proto.reset = function reset() {\n    this.destroy();\n    this.setState(this.initialState);\n  };\n  _proto.isActive = function isActive() {\n    return this.observers.some(function (observer) {\n      return observer.options.enabled !== false;\n    });\n  };\n  _proto.isFetching = function isFetching() {\n    return this.state.isFetching;\n  };\n  _proto.isStale = function isStale() {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(function (observer) {\n      return observer.getCurrentResult().isStale;\n    });\n  };\n  _proto.isStaleByTime = function isStaleByTime(staleTime) {\n    if (staleTime === void 0) {\n      staleTime = 0;\n    }\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  };\n  _proto.onFocus = function onFocus() {\n    var _this$retryer2;\n    var observer = this.observers.find(function (x) {\n      return x.willFetchOnWindowFocus();\n    });\n    if (observer) {\n      observer.refetch();\n    } // Continue fetch if currently paused\n\n    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n  };\n  _proto.onOnline = function onOnline() {\n    var _this$retryer3;\n    var observer = this.observers.find(function (x) {\n      return x.willFetchOnReconnect();\n    });\n    if (observer) {\n      observer.refetch();\n    } // Continue fetch if currently paused\n\n    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n  };\n  _proto.addObserver = function addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the query from being garbage collected\n\n      this.clearGcTimeout();\n      this.cache.notify(this);\n    }\n  };\n  _proto.removeObserver = function removeObserver(observer) {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(function (x) {\n        return x !== observer;\n      });\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable) {\n            this.retryer.cancel();\n          } else {\n            this.retryer.cancelRetry();\n          }\n        }\n        if (this.cacheTime) {\n          this.scheduleGc();\n        } else {\n          this.cache.remove(this);\n        }\n      }\n      this.cache.notify(this);\n    }\n  };\n  _proto.invalidate = function invalidate() {\n    if (!this.state.isInvalidated) {\n      this.dispatch({\n        type: 'invalidate'\n      });\n    }\n  };\n  _proto.fetch = function fetch(options, fetchOptions) {\n    var _this2 = this,\n      _this$options$behavio,\n      _context$fetchOptions;\n    if (this.state.isFetching) if (this.state.dataUpdatedAt && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {\n      // Silently cancel current fetch if the user wants to cancel refetches\n      this.cancel({\n        silent: true\n      });\n    } else if (this.promise) {\n      // Return current promise if we are already fetching\n      return this.promise;\n    } // Update config if passed, otherwise the config from the last execution is used\n\n    if (options) {\n      this.setOptions(options);\n    } // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n\n    if (!this.options.queryFn) {\n      var observer = this.observers.find(function (x) {\n        return x.options.queryFn;\n      });\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    } // Create query function context\n\n    var queryKey = ensureArray(this.queryKey);\n    var queryFnContext = {\n      queryKey: queryKey,\n      pageParam: undefined\n    }; // Create fetch function\n\n    var fetchFn = function fetchFn() {\n      return _this2.options.queryFn ? _this2.options.queryFn(queryFnContext) : Promise.reject('Missing queryFn');\n    }; // Trigger behavior hook\n\n    var context = {\n      fetchOptions: fetchOptions,\n      options: this.options,\n      queryKey: queryKey,\n      state: this.state,\n      fetchFn: fetchFn\n    };\n    if ((_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch) {\n      var _this$options$behavio2;\n      (_this$options$behavio2 = this.options.behavior) == null ? void 0 : _this$options$behavio2.onFetch(context);\n    } // Set to fetching state if not already in it\n\n    if (!this.state.isFetching || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n      var _context$fetchOptions2;\n      this.dispatch({\n        type: 'fetch',\n        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n      });\n    } // Try to fetch the data\n\n    this.retryer = new Retryer({\n      fn: context.fetchFn,\n      onFail: function onFail() {\n        _this2.dispatch({\n          type: 'failed'\n        });\n      },\n      onPause: function onPause() {\n        _this2.dispatch({\n          type: 'pause'\n        });\n      },\n      onContinue: function onContinue() {\n        _this2.dispatch({\n          type: 'continue'\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay\n    });\n    this.promise = this.retryer.promise.then(function (data) {\n      return _this2.setData(data);\n    }).catch(function (error) {\n      // Set error state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        _this2.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        if (_this2.cache.config.onError) {\n          _this2.cache.config.onError(error, _this2);\n        } // Log error\n\n        getLogger().error(error);\n      } // Remove query after fetching if cache time is 0\n\n      if (_this2.cacheTime === 0) {\n        _this2.optionalRemove();\n      } // Propagate error\n\n      throw error;\n    }).then(function (data) {\n      // Remove query after fetching if cache time is 0\n      if (_this2.cacheTime === 0) {\n        _this2.optionalRemove();\n      }\n      return data;\n    });\n    return this.promise;\n  };\n  _proto.dispatch = function dispatch(action) {\n    var _this3 = this;\n    this.state = this.reducer(this.state, action);\n    notifyManager.batch(function () {\n      _this3.observers.forEach(function (observer) {\n        observer.onQueryUpdate(action);\n      });\n      _this3.cache.notify(_this3);\n    });\n  };\n  _proto.getDefaultState = function getDefaultState(options) {\n    var data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;\n    var hasInitialData = typeof options.initialData !== 'undefined';\n    var initialDataUpdatedAt = hasInitialData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n    var hasData = typeof data !== 'undefined';\n    return {\n      data: data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle'\n    };\n  };\n  _proto.reducer = function reducer(state, action) {\n    var _action$meta, _action$dataUpdatedAt;\n    switch (action.type) {\n      case 'failed':\n        return _extends({}, state, {\n          fetchFailureCount: state.fetchFailureCount + 1\n        });\n      case 'pause':\n        return _extends({}, state, {\n          isPaused: true\n        });\n      case 'continue':\n        return _extends({}, state, {\n          isPaused: false\n        });\n      case 'fetch':\n        return _extends({}, state, {\n          fetchFailureCount: 0,\n          fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n          isFetching: true,\n          isPaused: false,\n          status: !state.dataUpdatedAt ? 'loading' : state.status\n        });\n      case 'success':\n        return _extends({}, state, {\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success'\n        });\n      case 'error':\n        var error = action.error;\n        if (isCancelledError(error) && error.revert) {\n          var previousStatus;\n          if (!state.dataUpdatedAt && !state.errorUpdatedAt) {\n            previousStatus = 'idle';\n          } else if (state.dataUpdatedAt > state.errorUpdatedAt) {\n            previousStatus = 'success';\n          } else {\n            previousStatus = 'error';\n          }\n          return _extends({}, state, {\n            fetchFailureCount: 0,\n            isFetching: false,\n            isPaused: false,\n            status: previousStatus\n          });\n        }\n        return _extends({}, state, {\n          error: error,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error'\n        });\n      case 'invalidate':\n        return _extends({}, state, {\n          isInvalidated: true\n        });\n      case 'setState':\n        return _extends({}, state, action.state);\n      default:\n        return state;\n    }\n  };\n  return Query;\n}();","map":{"version":3,"names":["_extends","ensureArray","functionalUpdate","isValidTimeout","noop","replaceEqualDeep","timeUntilStale","notifyManager","getLogger","Retryer","isCancelledError","Query","config","defaultOptions","setOptions","options","observers","cache","queryKey","queryHash","initialState","state","getDefaultState","scheduleGc","_proto","prototype","_this$options$cacheTi","cacheTime","Math","max","setDefaultOptions","_this","clearGcTimeout","gcTimeout","setTimeout","optionalRemove","clearTimeout","undefined","length","isFetching","remove","setData","updater","_this$options$isDataE","_this$options","prevData","data","isDataEqual","call","structuralSharing","dispatch","type","dataUpdatedAt","updatedAt","setState","cancel","_this$retryer","promise","retryer","then","catch","Promise","resolve","destroy","silent","reset","isActive","some","observer","enabled","isStale","isInvalidated","getCurrentResult","isStaleByTime","staleTime","onFocus","_this$retryer2","find","x","willFetchOnWindowFocus","refetch","continue","onOnline","_this$retryer3","willFetchOnReconnect","addObserver","indexOf","push","notify","removeObserver","filter","isTransportCancelable","cancelRetry","invalidate","fetch","fetchOptions","_this2","_this$options$behavio","_context$fetchOptions","cancelRefetch","queryFn","queryFnContext","pageParam","fetchFn","reject","context","behavior","onFetch","_this$options$behavio2","fetchMeta","meta","_context$fetchOptions2","fn","onFail","onPause","onContinue","retry","retryDelay","error","onError","action","_this3","reducer","batch","forEach","onQueryUpdate","initialData","hasInitialData","initialDataUpdatedAt","hasData","dataUpdateCount","Date","now","errorUpdateCount","errorUpdatedAt","fetchFailureCount","isPaused","status","_action$meta","_action$dataUpdatedAt","revert","previousStatus"],"sources":["D:/wamp64/www/UPYOG-Project/Test-UPYOG/UPYOG/frontend/micro-ui/web/micro-ui-internals/node_modules/react-query/es/core/query.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { ensureArray, functionalUpdate, isValidTimeout, noop, replaceEqualDeep, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { getLogger } from './logger';\nimport { Retryer, isCancelledError } from './retryer'; // TYPES\n\n// CLASS\nexport var Query = /*#__PURE__*/function () {\n  function Query(config) {\n    this.defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.cache = config.cache;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.initialState = config.state || this.getDefaultState(this.options);\n    this.state = this.initialState;\n    this.scheduleGc();\n  }\n\n  var _proto = Query.prototype;\n\n  _proto.setOptions = function setOptions(options) {\n    var _this$options$cacheTi;\n\n    this.options = _extends({}, this.defaultOptions, options); // Default to 5 minutes if not cache time is set\n\n    this.cacheTime = Math.max(this.cacheTime || 0, (_this$options$cacheTi = this.options.cacheTime) != null ? _this$options$cacheTi : 5 * 60 * 1000);\n  };\n\n  _proto.setDefaultOptions = function setDefaultOptions(options) {\n    this.defaultOptions = options;\n  };\n\n  _proto.scheduleGc = function scheduleGc() {\n    var _this = this;\n\n    this.clearGcTimeout();\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(function () {\n        _this.optionalRemove();\n      }, this.cacheTime);\n    }\n  };\n\n  _proto.clearGcTimeout = function clearGcTimeout() {\n    clearTimeout(this.gcTimeout);\n    this.gcTimeout = undefined;\n  };\n\n  _proto.optionalRemove = function optionalRemove() {\n    if (!this.observers.length && !this.state.isFetching) {\n      this.cache.remove(this);\n    }\n  };\n\n  _proto.setData = function setData(updater, options) {\n    var _this$options$isDataE, _this$options;\n\n    var prevData = this.state.data; // Get the new data\n\n    var data = functionalUpdate(updater, prevData); // Use prev data if an isDataEqual function is defined and returns `true`\n\n    if ((_this$options$isDataE = (_this$options = this.options).isDataEqual) == null ? void 0 : _this$options$isDataE.call(_this$options, prevData, data)) {\n      data = prevData;\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data);\n    } // Set data and mark it as cached\n\n\n    this.dispatch({\n      data: data,\n      type: 'success',\n      dataUpdatedAt: options == null ? void 0 : options.updatedAt\n    });\n    return data;\n  };\n\n  _proto.setState = function setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state: state\n    });\n  };\n\n  _proto.cancel = function cancel(options) {\n    var _this$retryer;\n\n    var promise = this.promise;\n    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  };\n\n  _proto.destroy = function destroy() {\n    this.clearGcTimeout();\n    this.cancel({\n      silent: true\n    });\n  };\n\n  _proto.reset = function reset() {\n    this.destroy();\n    this.setState(this.initialState);\n  };\n\n  _proto.isActive = function isActive() {\n    return this.observers.some(function (observer) {\n      return observer.options.enabled !== false;\n    });\n  };\n\n  _proto.isFetching = function isFetching() {\n    return this.state.isFetching;\n  };\n\n  _proto.isStale = function isStale() {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(function (observer) {\n      return observer.getCurrentResult().isStale;\n    });\n  };\n\n  _proto.isStaleByTime = function isStaleByTime(staleTime) {\n    if (staleTime === void 0) {\n      staleTime = 0;\n    }\n\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  };\n\n  _proto.onFocus = function onFocus() {\n    var _this$retryer2;\n\n    var observer = this.observers.find(function (x) {\n      return x.willFetchOnWindowFocus();\n    });\n\n    if (observer) {\n      observer.refetch();\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n  };\n\n  _proto.onOnline = function onOnline() {\n    var _this$retryer3;\n\n    var observer = this.observers.find(function (x) {\n      return x.willFetchOnReconnect();\n    });\n\n    if (observer) {\n      observer.refetch();\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n  };\n\n  _proto.addObserver = function addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the query from being garbage collected\n\n      this.clearGcTimeout();\n      this.cache.notify(this);\n    }\n  };\n\n  _proto.removeObserver = function removeObserver(observer) {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(function (x) {\n        return x !== observer;\n      });\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable) {\n            this.retryer.cancel();\n          } else {\n            this.retryer.cancelRetry();\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc();\n        } else {\n          this.cache.remove(this);\n        }\n      }\n\n      this.cache.notify(this);\n    }\n  };\n\n  _proto.invalidate = function invalidate() {\n    if (!this.state.isInvalidated) {\n      this.dispatch({\n        type: 'invalidate'\n      });\n    }\n  };\n\n  _proto.fetch = function fetch(options, fetchOptions) {\n    var _this2 = this,\n        _this$options$behavio,\n        _context$fetchOptions;\n\n    if (this.state.isFetching) if (this.state.dataUpdatedAt && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {\n      // Silently cancel current fetch if the user wants to cancel refetches\n      this.cancel({\n        silent: true\n      });\n    } else if (this.promise) {\n      // Return current promise if we are already fetching\n      return this.promise;\n    } // Update config if passed, otherwise the config from the last execution is used\n\n    if (options) {\n      this.setOptions(options);\n    } // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n\n\n    if (!this.options.queryFn) {\n      var observer = this.observers.find(function (x) {\n        return x.options.queryFn;\n      });\n\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    } // Create query function context\n\n\n    var queryKey = ensureArray(this.queryKey);\n    var queryFnContext = {\n      queryKey: queryKey,\n      pageParam: undefined\n    }; // Create fetch function\n\n    var fetchFn = function fetchFn() {\n      return _this2.options.queryFn ? _this2.options.queryFn(queryFnContext) : Promise.reject('Missing queryFn');\n    }; // Trigger behavior hook\n\n\n    var context = {\n      fetchOptions: fetchOptions,\n      options: this.options,\n      queryKey: queryKey,\n      state: this.state,\n      fetchFn: fetchFn\n    };\n\n    if ((_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch) {\n      var _this$options$behavio2;\n\n      (_this$options$behavio2 = this.options.behavior) == null ? void 0 : _this$options$behavio2.onFetch(context);\n    } // Set to fetching state if not already in it\n\n\n    if (!this.state.isFetching || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n      var _context$fetchOptions2;\n\n      this.dispatch({\n        type: 'fetch',\n        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n      });\n    } // Try to fetch the data\n\n\n    this.retryer = new Retryer({\n      fn: context.fetchFn,\n      onFail: function onFail() {\n        _this2.dispatch({\n          type: 'failed'\n        });\n      },\n      onPause: function onPause() {\n        _this2.dispatch({\n          type: 'pause'\n        });\n      },\n      onContinue: function onContinue() {\n        _this2.dispatch({\n          type: 'continue'\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay\n    });\n    this.promise = this.retryer.promise.then(function (data) {\n      return _this2.setData(data);\n    }).catch(function (error) {\n      // Set error state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        _this2.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        if (_this2.cache.config.onError) {\n          _this2.cache.config.onError(error, _this2);\n        } // Log error\n\n\n        getLogger().error(error);\n      } // Remove query after fetching if cache time is 0\n\n\n      if (_this2.cacheTime === 0) {\n        _this2.optionalRemove();\n      } // Propagate error\n\n\n      throw error;\n    }).then(function (data) {\n      // Remove query after fetching if cache time is 0\n      if (_this2.cacheTime === 0) {\n        _this2.optionalRemove();\n      }\n\n      return data;\n    });\n    return this.promise;\n  };\n\n  _proto.dispatch = function dispatch(action) {\n    var _this3 = this;\n\n    this.state = this.reducer(this.state, action);\n    notifyManager.batch(function () {\n      _this3.observers.forEach(function (observer) {\n        observer.onQueryUpdate(action);\n      });\n\n      _this3.cache.notify(_this3);\n    });\n  };\n\n  _proto.getDefaultState = function getDefaultState(options) {\n    var data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;\n    var hasInitialData = typeof options.initialData !== 'undefined';\n    var initialDataUpdatedAt = hasInitialData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n    var hasData = typeof data !== 'undefined';\n    return {\n      data: data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle'\n    };\n  };\n\n  _proto.reducer = function reducer(state, action) {\n    var _action$meta, _action$dataUpdatedAt;\n\n    switch (action.type) {\n      case 'failed':\n        return _extends({}, state, {\n          fetchFailureCount: state.fetchFailureCount + 1\n        });\n\n      case 'pause':\n        return _extends({}, state, {\n          isPaused: true\n        });\n\n      case 'continue':\n        return _extends({}, state, {\n          isPaused: false\n        });\n\n      case 'fetch':\n        return _extends({}, state, {\n          fetchFailureCount: 0,\n          fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n          isFetching: true,\n          isPaused: false,\n          status: !state.dataUpdatedAt ? 'loading' : state.status\n        });\n\n      case 'success':\n        return _extends({}, state, {\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success'\n        });\n\n      case 'error':\n        var error = action.error;\n\n        if (isCancelledError(error) && error.revert) {\n          var previousStatus;\n\n          if (!state.dataUpdatedAt && !state.errorUpdatedAt) {\n            previousStatus = 'idle';\n          } else if (state.dataUpdatedAt > state.errorUpdatedAt) {\n            previousStatus = 'success';\n          } else {\n            previousStatus = 'error';\n          }\n\n          return _extends({}, state, {\n            fetchFailureCount: 0,\n            isFetching: false,\n            isPaused: false,\n            status: previousStatus\n          });\n        }\n\n        return _extends({}, state, {\n          error: error,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error'\n        });\n\n      case 'invalidate':\n        return _extends({}, state, {\n          isInvalidated: true\n        });\n\n      case 'setState':\n        return _extends({}, state, action.state);\n\n      default:\n        return state;\n    }\n  };\n\n  return Query;\n}();"],"mappings":"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"},"metadata":{},"sourceType":"module"}